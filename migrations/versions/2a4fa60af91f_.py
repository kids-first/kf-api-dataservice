"""
1.2.0 - Add biospecimen_genomic_file association table

Revision ID: 2a4fa60af91f
Revises: ce359a457d3d
Create Date: 2018-07-17 12:56:38.447500

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table
from sqlalchemy.dialects import postgresql
import dataservice
from dataservice.api.common.id_service import uuid_generator, kf_id_generator

# revision identifiers, used by Alembic.
revision = '2a4fa60af91f'
down_revision = 'ce359a457d3d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('biospecimen_genomic_file',
                    sa.Column('uuid', postgresql.UUID(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('modified_at', sa.DateTime(), nullable=True),
                    sa.Column('genomic_file_id', dataservice.api.common.model.KfId(
                        length=11), nullable=False),
                    sa.Column('biospecimen_id', dataservice.api.common.model.KfId(
                        length=11), nullable=False),
                    sa.Column('kf_id', dataservice.api.common.model.KfId(
                        length=11), nullable=False),
                    sa.ForeignKeyConstraint(['biospecimen_id'], [
                                            'biospecimen.kf_id'], ),
                    sa.ForeignKeyConstraint(['genomic_file_id'], [
                                            'genomic_file.kf_id'], ),
                    sa.PrimaryKeyConstraint('kf_id'),
                    sa.UniqueConstraint('genomic_file_id', 'biospecimen_id'),
                    sa.UniqueConstraint('uuid')
                    )
    data_upgrades()
    op.drop_column('genomic_file', 'biospecimen_id')


def data_upgrades():
    """
    COPY genomic_file.biospecimen_id TO biospecimen_genomic_file.biospecimen_id
    COPY genomic_file.kf_id TO biospecimen_genomic_file.genomic_file_id
    DROP genomic_file.biospecimen_id
    """
    connection = op.get_bind()

    biospecimen_genomic_file = sa.Table(
        'biospecimen_genomic_file',
        sa.MetaData(),
        sa.Column('kf_id', dataservice.api.common.model.KfId(length=11),
                  default=kf_id_generator('BG')),
        sa.Column('genomic_file_id', dataservice.api.common.model.KfId(
            length=11)),
        sa.Column('biospecimen_id', dataservice.api.common.model.KfId(
            length=11)),
    )

    genomic_file = sa.Table(
        'genomic_file',
        sa.MetaData(),
        sa.Column('kf_id', dataservice.api.common.model.KfId(length=11)),
        sa.Column('biospecimen_id', dataservice.api.common.model.KfId(
            length=11)),
    )

    results = connection.execute(sa.select([
        genomic_file.c.biospecimen_id,
        genomic_file.c.kf_id,
    ])).fetchall()

    for bs, gf in results:
        if not bs or not gf:
            continue
        connection.execute(biospecimen_genomic_file.insert().values(
            biospecimen_id=bs,
            genomic_file_id=gf
        ))


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('genomic_file', sa.Column(
        'biospecimen_id',
        dataservice.api.common.model.KfId(length=11), nullable=True))

    data_downgrades()

    op.drop_table('biospecimen_genomic_file')


def data_downgrades():
    """
    COPY biospecimen_genomic_file.biospecimen_id TO genomic_file.biospecimen_id
    # NB This will lose all information relating many biospecimens to one file
    """
    connection = op.get_bind()

    biospecimen_genomic_file = sa.Table(
        'biospecimen_genomic_file',
        sa.MetaData(),
        sa.Column('genomic_file_id', dataservice.api.common.model.KfId(
            length=11)),
        sa.Column('biospecimen_id', dataservice.api.common.model.KfId(
            length=11)),
    )

    genomic_file = sa.Table(
        'genomic_file',
        sa.MetaData(),
        sa.Column('kf_id', dataservice.api.common.model.KfId(
            length=11)),
        sa.Column('biospecimen_id', dataservice.api.common.model.KfId(
            length=11)),
    )

    results = connection.execute(sa.select([
        biospecimen_genomic_file.c.biospecimen_id,
        biospecimen_genomic_file.c.genomic_file_id,
    ])).fetchall()

    for bs, gf in results:
        if not bs or not gf:
            continue
        connection.execute(genomic_file.update().where(genomic_file.c.kf_id == gf).values(
            biospecimen_id=bs
        ))
